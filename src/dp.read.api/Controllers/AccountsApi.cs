/*
 * Accounts Read Data Plane
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using dp.read.api.Attributes;
using dp.read.api.Models;
using Org.OpenAPITools.Api;
using dp.read.api.Enums;

namespace dp.read.api.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class AccountsApiController : ControllerBase
    {
        private readonly IServiceProvider _serviceProvider;

        public AccountsApiController(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Get account balance
        /// </summary>
        /// <param name="address">the string representing the address</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Client Error</response>
        /// <response code="503">Server Error</response>
        [HttpGet]
        [Route("/api/accounts/{address}/balance")]
        [ValidateModelState]
        [SwaggerOperation("GetAccountBalance")]
        [SwaggerResponse(statusCode: 200, type: typeof(BalanceResponse), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponseModel), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponseModel), description: "Client Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponseModel), description: "Server Error")]
        public virtual async Task<IActionResult> GetAccountBalance([FromRoute][Required]string address)
        {
            IDpscanApi service = _serviceProvider.GetRequiredService<IDpscanApi>();

            var result = service.GetAccount((Org.OpenAPITools.Model.Platform)PlatformType.DogeP, address); 
            
            if (result == null) return NotFound();

            Balance balance = new Balance();
            balance._Balance =(string) result.Balance;
            balance.BlockDate = null;
            balance.BlockNumber = null;

            BalanceResponse balanceResponse = new BalanceResponse();
            balanceResponse.Result = balance;

            return Ok(balanceResponse);
        }

        /// <summary>
        /// List account transactions info by page
        /// </summary>
        /// <param name="address">the string representing the address</param>
        /// <param name="pageIndex">the interger representing page number</param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Client Error</response>
        /// <response code="503">Server Error</response>
        [HttpGet]
        [Route("/api/accounts/{address}/txn/page/{pageIndex}")]
        [ValidateModelState]
        [SwaggerOperation("ListAccountTransactions")]
        [SwaggerResponse(statusCode: 200, type: typeof(AccountTransactionSummaryResponse), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponseModel), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponseModel), description: "Client Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponseModel), description: "Server Error")]
        public virtual IActionResult ListAccountTransactions([FromRoute][Required]string address, [FromRoute][Required]int? pageIndex)
        {
            IDpscanApi service = _serviceProvider.GetRequiredService<IDpscanApi>();

            var result = service.ListAccountTransactions((Org.OpenAPITools.Model.Platform)PlatformType.DogeP, address, pageIndex);
            
            if (result == null) return NotFound();

            List<AccountTransactionSummary> accountTransactionSummaries = new List<AccountTransactionSummary>();            
            
            foreach(var r in result.Result)
            {
                AccountTransactionSummary accountTransactionSummary = new AccountTransactionSummary();
                accountTransactionSummary.Hash = r.TxnHash;
                accountTransactionSummary.BlockNumber = null;
                accountTransactionSummary.BlockHash = r.BlockHash;
                accountTransactionSummary.CreatedAt = r.CreatedAt;
                accountTransactionSummary.Value = r.Value;
                accountTransactionSummaries.Add(accountTransactionSummary);
            }

            int pageCount = (int)result.PageCount;

            AccountTransactionSummaryResponse response = new AccountTransactionSummaryResponse();
            response.PageCount = pageCount;
            response.Result = new List<AccountTransactionSummary>(accountTransactionSummaries);
            return Ok(response);
        }
    }
}
