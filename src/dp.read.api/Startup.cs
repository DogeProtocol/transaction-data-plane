/*
 * CryptoMarketApi
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.OpenApi.Models;
using System.Text.Json.Serialization;
using System.Text.Json;
using System.Linq;
using System.Reflection;
using System.Collections.Generic;
using dp.read.api.Security;
using dp.read.api.Filters;
using Org.OpenAPITools.Api;

namespace dp.read.api
{
    public class Globals
    {
        public static string API_CLIENT_ENDPOINT { get; set; }
    }

    public class PasrseSetting
    {
        public ApiClientSettings apiClient { get; set; }
    }

    public class ApiClientSettings
    {
        public string Basepath { get; set; }
    }

    /// <summary>
    /// Startup
    /// </summary>
    public class Startup
    {
        private readonly IWebHostEnvironment _hostingEnv;
        private IConfiguration Configuration { get; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="env"></param>
        /// <param name="configuration"></param>
        public Startup(IWebHostEnvironment env, IConfiguration configuration)
        {
            _hostingEnv = env;
       
            Configuration = Configure();

            ApiClientSettings apiClient = new();
            configuration.GetSection("ApiClient").Bind(apiClient);
            Globals.API_CLIENT_ENDPOINT = apiClient.Basepath;
        }

        private static IConfiguration Configure()
        {
            return new ConfigurationBuilder()
                .SetBasePath(Directory.GetParent(AppContext.BaseDirectory).FullName)
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddJsonFile("appsettings.development.json", optional: false)
                .AddJsonFile("appsettings.production.json", optional: true)
                .AddEnvironmentVariables()
                .Build();
        }

        /// <summary>
        /// This method gets called by the runtime. Use this method to add services to the container.
        /// </summary>
        /// <param name="services"></param>
        public void ConfigureServices(IServiceCollection services)
        {

            //GenerateReflectionData();

            // Add framework services.
            services.AddMvc();
            //    .AddMvc(options =>
            //    {
            //        options.InputFormatters.RemoveType<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonInputFormatter>();
            //        options.OutputFormatters.RemoveType<Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter>();
            //    })
            //    .AddXmlSerializerFormatters();

            
            services.AddAuthentication(ApiKeyAuthenticationHandler.SchemeName)
                .AddScheme<AuthenticationSchemeOptions, ApiKeyAuthenticationHandler>(ApiKeyAuthenticationHandler.SchemeName, null);

            services.AddControllers().AddJsonOptions(options =>
              {
                  options.JsonSerializerOptions.PropertyNamingPolicy = JsonNamingPolicy.CamelCase;
                  options.JsonSerializerOptions.DictionaryKeyPolicy = JsonNamingPolicy.CamelCase;
                  options.JsonSerializerOptions.DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingDefault;
              });

            // Dictionary<string, string> conections = new();
            // Configuration.GetSection("ConnectionStrings").Bind(conections);
            // services.AddCache(conections);

 
            services.AddScoped<IDpscanApi, DpscanApi>();

            services
                .AddSwaggerGen(c =>
                {
                    c.SwaggerDoc("v1", new OpenApiInfo
                    {
                        Version = "v1",
                        Title = "Doge Protocol Read API",
                        Description = "Doge Protocol Read API"
                    });
                    c.CustomSchemaIds(type => type.FullName);
                    c.IncludeXmlComments($"{AppContext.BaseDirectory}{Path.DirectorySeparatorChar}{_hostingEnv.ApplicationName}.xml");

                    // Include DataAnnotation attributes on Controller Action parameters as Swagger validation rules (e.g required, pattern, ..)
                    // Use [ValidateModelState] on Actions to actually validate it in C# as well!
                    c.OperationFilter<GeneratePathParamsValidationFilter>();
                });
        }


        //public void GenerateReflectionData()
        //{
        //    var type = typeof(BaseService);
        //    var types = type.Assembly.GetTypes()
        //        .Where(p => type.IsAssignableFrom(p) && !p.IsAbstract);
        //    foreach (Type t in types)
        //    {
        //        FieldInfo info = t.GetField("TYPES", BindingFlags.Public | BindingFlags.Static);
        //        Dictionary<PlatformType, Type> dict = new();
        //        foreach ((PlatformType e, Type te) in platforms)
        //        {
        //            string name = $"{t.FullName}[{te.FullName}]";
        //            Type baseT = type.Assembly.GetType(t.FullName);
        //            Type gT = type.Assembly.GetType(te.FullName);
        //            //console.writeline(baseT.MakeGenericType(gT));
        //            dict[e] = baseT.MakeGenericType(gT);
        //        }
        //        info.SetValue(null, dict);
        //    }
        //}

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
            }

            app.UseStaticFiles();
            app.UseRouting();

            //app.UseAuthentication();
            //app.UseAuthorization();
            app.UseSwagger();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });

            app.UseSwaggerUI(c =>
            {
                c.SwaggerEndpoint("/swagger/v1/swagger.json", "DogeProtocolReadAPI v1");
            });
        }
    }
}
