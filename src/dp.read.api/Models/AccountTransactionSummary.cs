/*
 * Accounts Read Data Plane
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace dp.read.api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountTransactionSummary : IEquatable<AccountTransactionSummary>
    { 
        /// <summary>
        /// Gets or Sets Hash
        /// </summary>
        [DataMember(Name="hash")]
        public string Hash { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name="blockNumber")]
        public double? BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockHash
        /// </summary>
        [DataMember(Name="blockHash")]
        public string BlockHash { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt")]
        public DateTime? CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Nonce
        /// </summary>
        [DataMember(Name="nonce")]
        public Object Nonce { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="from")]
        public string From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to")]
        public string To { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value")]
        public Object Value { get; set; }

        /// <summary>
        /// Gets or Sets Gas
        /// </summary>
        [DataMember(Name="gas")]
        public Object Gas { get; set; }

        /// <summary>
        /// Gets or Sets GasPrice
        /// </summary>
        [DataMember(Name="gasPrice")]
        public Object GasPrice { get; set; }

        /// <summary>
        /// Gets or Sets TransactionType
        /// </summary>
        [DataMember(Name="transactionType")]
        public TransactionType TransactionType { get; set; }

        /// <summary>
        /// Gets or Sets Receipt
        /// </summary>
        [DataMember(Name="receipt")]
        public Receipt Receipt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountTransactionSummary {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Nonce: ").Append(Nonce).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Gas: ").Append(Gas).Append("\n");
            sb.Append("  GasPrice: ").Append(GasPrice).Append("\n");
            sb.Append("  TransactionType: ").Append(TransactionType).Append("\n");
            sb.Append("  Receipt: ").Append(Receipt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountTransactionSummary)obj);
        }

        /// <summary>
        /// Returns true if AccountTransactionSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountTransactionSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountTransactionSummary other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Hash == other.Hash ||
                    Hash != null &&
                    Hash.Equals(other.Hash)
                ) && 
                (
                    BlockNumber == other.BlockNumber ||
                    BlockNumber != null &&
                    BlockNumber.Equals(other.BlockNumber)
                ) && 
                (
                    BlockHash == other.BlockHash ||
                    BlockHash != null &&
                    BlockHash.Equals(other.BlockHash)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Nonce == other.Nonce ||
                    Nonce != null &&
                    Nonce.Equals(other.Nonce)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    From.Equals(other.From)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Gas == other.Gas ||
                    Gas != null &&
                    Gas.Equals(other.Gas)
                ) && 
                (
                    GasPrice == other.GasPrice ||
                    GasPrice != null &&
                    GasPrice.Equals(other.GasPrice)
                ) && 
                (
                    TransactionType == other.TransactionType ||
                    TransactionType != null &&
                    TransactionType.Equals(other.TransactionType)
                ) && 
                (
                    Receipt == other.Receipt ||
                    Receipt != null &&
                    Receipt.Equals(other.Receipt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Hash != null)
                    hashCode = hashCode * 59 + Hash.GetHashCode();
                    if (BlockNumber != null)
                    hashCode = hashCode * 59 + BlockNumber.GetHashCode();
                    if (BlockHash != null)
                    hashCode = hashCode * 59 + BlockHash.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Nonce != null)
                    hashCode = hashCode * 59 + Nonce.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Gas != null)
                    hashCode = hashCode * 59 + Gas.GetHashCode();
                    if (GasPrice != null)
                    hashCode = hashCode * 59 + GasPrice.GetHashCode();
                    if (TransactionType != null)
                    hashCode = hashCode * 59 + TransactionType.GetHashCode();
                    if (Receipt != null)
                    hashCode = hashCode * 59 + Receipt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountTransactionSummary left, AccountTransactionSummary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountTransactionSummary left, AccountTransactionSummary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
