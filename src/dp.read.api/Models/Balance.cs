/*
 * Accounts Read Data Plane
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace dp.read.api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Balance : IEquatable<Balance>
    { 
        /// <summary>
        /// Gets or Sets _Balance
        /// </summary>
        [DataMember(Name="balance")]
        public Object _Balance { get; set; }

        /// <summary>
        /// Gets or Sets BlockNumber
        /// </summary>
        [DataMember(Name="blockNumber")]
        public double? BlockNumber { get; set; }

        /// <summary>
        /// Gets or Sets BlockDate
        /// </summary>
        [DataMember(Name="blockDate")]
        public DateTime? BlockDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Balance {\n");
            sb.Append("  _Balance: ").Append(_Balance).Append("\n");
            sb.Append("  BlockNumber: ").Append(BlockNumber).Append("\n");
            sb.Append("  BlockDate: ").Append(BlockDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Balance)obj);
        }

        /// <summary>
        /// Returns true if Balance instances are equal
        /// </summary>
        /// <param name="other">Instance of Balance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Balance other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    _Balance == other._Balance ||
                    _Balance != null &&
                    _Balance.Equals(other._Balance)
                ) && 
                (
                    BlockNumber == other.BlockNumber ||
                    BlockNumber != null &&
                    BlockNumber.Equals(other.BlockNumber)
                ) && 
                (
                    BlockDate == other.BlockDate ||
                    BlockDate != null &&
                    BlockDate.Equals(other.BlockDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (_Balance != null)
                    hashCode = hashCode * 59 + _Balance.GetHashCode();
                    if (BlockNumber != null)
                    hashCode = hashCode * 59 + BlockNumber.GetHashCode();
                    if (BlockDate != null)
                    hashCode = hashCode * 59 + BlockDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Balance left, Balance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Balance left, Balance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
