/*
 * Accounts Read Data Plane
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace dp.read.api.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Receipt : IEquatable<Receipt>
    { 
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type")]
        public Object Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public Object Status { get; set; }

        /// <summary>
        /// Gets or Sets ContractAddress
        /// </summary>
        [DataMember(Name="contractAddress")]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Gets or Sets GasUsed
        /// </summary>
        [DataMember(Name="gasUsed")]
        public Object GasUsed { get; set; }

        /// <summary>
        /// Gets or Sets CumulativeGasUsed
        /// </summary>
        [DataMember(Name="cumulativeGasUsed")]
        public Object CumulativeGasUsed { get; set; }

        /// <summary>
        /// Gets or Sets EffectiveGasPrice
        /// </summary>
        [DataMember(Name="effectiveGasPrice")]
        public Object EffectiveGasPrice { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Receipt {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  GasUsed: ").Append(GasUsed).Append("\n");
            sb.Append("  CumulativeGasUsed: ").Append(CumulativeGasUsed).Append("\n");
            sb.Append("  EffectiveGasPrice: ").Append(EffectiveGasPrice).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Receipt)obj);
        }

        /// <summary>
        /// Returns true if Receipt instances are equal
        /// </summary>
        /// <param name="other">Instance of Receipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Receipt other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ContractAddress == other.ContractAddress ||
                    ContractAddress != null &&
                    ContractAddress.Equals(other.ContractAddress)
                ) && 
                (
                    GasUsed == other.GasUsed ||
                    GasUsed != null &&
                    GasUsed.Equals(other.GasUsed)
                ) && 
                (
                    CumulativeGasUsed == other.CumulativeGasUsed ||
                    CumulativeGasUsed != null &&
                    CumulativeGasUsed.Equals(other.CumulativeGasUsed)
                ) && 
                (
                    EffectiveGasPrice == other.EffectiveGasPrice ||
                    EffectiveGasPrice != null &&
                    EffectiveGasPrice.Equals(other.EffectiveGasPrice)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ContractAddress != null)
                    hashCode = hashCode * 59 + ContractAddress.GetHashCode();
                    if (GasUsed != null)
                    hashCode = hashCode * 59 + GasUsed.GetHashCode();
                    if (CumulativeGasUsed != null)
                    hashCode = hashCode * 59 + CumulativeGasUsed.GetHashCode();
                    if (EffectiveGasPrice != null)
                    hashCode = hashCode * 59 + EffectiveGasPrice.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Receipt left, Receipt right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Receipt left, Receipt right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
