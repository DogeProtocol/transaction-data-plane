/*
 * Accounts Write Data Plane
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using dp.write.api.Attributes;
using dp.write.transaction;
using dp.write.transaction.Models;
using dp.write.transaction.Services.Queues;

namespace dp.write.api.Controllers
{
    /// <summary>
    /// 
    /// </summary>
    public class AccountsApiController : ControllerBase
    {
        private readonly IServiceProvider _serviceProvider;
        public AccountsApiController(IServiceProvider serviceProvider)
        {
            _serviceProvider = serviceProvider;
        }

        /// <summary>
        /// Send Transaction
        /// </summary>
        /// <param name="inlineObject"></param>
        /// <response code="200">Success</response>
        /// <response code="404">Not Found</response>
        /// <response code="429">Client Error</response>
        /// <response code="503">Server Error</response>
        [HttpPost]
        [Route("/api/transactions")]
        [ValidateModelState]
        [SwaggerOperation("SendTransaction")]
        [SwaggerResponse(statusCode: 200, type: typeof(TransactionSummaryResponse), description: "Success")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponseModel), description: "Not Found")]
        [SwaggerResponse(statusCode: 429, type: typeof(ErrorResponseModel), description: "Client Error")]
        [SwaggerResponse(statusCode: 503, type: typeof(ErrorResponseModel), description: "Server Error")]
        public virtual async Task<IActionResult> SendTransaction([FromBody]InlineObject inlineObject)
        {
            IQueueService service = _serviceProvider.GetRequiredService<IQueueService>();
            string pending = Configuration.State.Pending.ToString();
            string guid = Guid.NewGuid().ToString();
            service.Set(guid, inlineObject.TxnData, DateTime.UtcNow, pending);

            TransactionSummaryResponse transactionSummaryResponse = new TransactionSummaryResponse();
            transactionSummaryResponse.Metadata = "2.0";
            transactionSummaryResponse.Hash = guid;

            return Ok(transactionSummaryResponse);
        }
    }
}
